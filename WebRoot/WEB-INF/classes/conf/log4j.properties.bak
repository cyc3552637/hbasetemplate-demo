################################################################################
# ①配置根Logger，其语法为：
#
# log4j.rootLogger = [level],appenderName,appenderName2,...
# level是日志记录的优先级，分为OFF,TRACE,DEBUG,INFO,WARN,ERROR,FATAL,ALL或者您定义的级别。 
# Log4j建议只使用四个级别，优先级从低到高分别是DEBUG,INFO,WARN,ERROR。
#
# 通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关
# 比如在这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来
# appenderName就是指定日志信息输出到哪个地方。可同时指定多个输出目的
################################################################################
# ②配置日志信息输出目的地Appender，其语法为：
#
# log4j.appender.appenderName = fully.qualified.name.of.appender.class
# log4j.appender.appenderName.optionN = valueN
#
# Log4j提供的appender有以下几种：
# 1)org.apache.log4j.ConsoleAppender(输出到控制台)
# 2)org.apache.log4j.FileAppender(输出到文件)
# 3)org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)
# 4)org.apache.log4j.RollingFileAppender(文件大小到达指定尺寸的时候产生一个新的文件)
# 5)org.apache.log4j.WriterAppender(将日志信息以流格式发送到任意指定的地方)
#
# 1)ConsoleAppender选项属性
# -Threshold = DEBUG:指定日志消息的输出最低层次
# -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出
# -Target = System.err:默认值System.out,输出到控制台(err为红色,out为黑色)
#
# 2)FileAppender选项属性
# -Threshold = INFO:指定日志消息的输出最低层次
# -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出
# -File = C:\log4j.log:指定消息输出到C:\log4j.log文件
# -Append = FALSE:默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容
# -Encoding = UTF-8:可以指定文件编码格式
#
# 3)DailyRollingFileAppender选项属性
# -Threshold = WARN:指定日志消息的输出最低层次
# -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出
# -File = C:\log4j.log:指定消息输出到C:\log4j.log文件
# -Append = FALSE:默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容
# -DatePattern='.'yyyy-ww:每周滚动一次文件,即每周产生一个新的文件。还可以按用以下参数:
#              '.'yyyy-MM:每月
#              '.'yyyy-ww:每周
#              '.'yyyy-MM-dd:每天
#              '.'yyyy-MM-dd-a:每天两次
#              '.'yyyy-MM-dd-HH:每小时
#              '.'yyyy-MM-dd-HH-mm:每分钟
# -Encoding = UTF-8:可以指定文件编码格式
#
# 4)RollingFileAppender选项属性

# -Threshold = ERROR:指定日志消息的输出最低层次
# -ImmediateFlush = TRUE:默认值是true,所有的消息都会被立即输出
# -File = C:/log4j.log:指定消息输出到C:/log4j.log文件
# -Append = FALSE:默认值true,将消息追加到指定文件中，false指将消息覆盖指定的文件内容
# -MaxFileSize = 100KB:后缀可以是KB,MB,GB.在日志文件到达该大小时,将会自动滚动.如:log4j.log.1
# -MaxBackupIndex = 2:指定可以产生的滚动文件的最大数
# -Encoding = UTF-8:可以指定文件编码格式
################################################################################
# ③配置日志信息的格式(布局)，其语法为：
#
# log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class
# log4j.appender.appenderName.layout.optionN = valueN
#
# Log4j提供的layout有以下几种：
# 1)org.apache.log4j.HTMLLayout(以HTML表格形式布局)
# 2)org.apache.log4j.PatternLayout(可以灵活地指定布局模式)
# 3)org.apache.log4j.SimpleLayout(包含日志信息的级别和信息字符串)
# 4)org.apache.log4j.TTCCLayout(包含日志产生的时间、线程、类别等等信息)
# 5)org.apache.log4j.xml.XMLLayout(以XML形式布局)
#
# 5)HTMLLayout选项属性
# -LocationInfo = TRUE:默认值false,输出java文件名称和行号
# -Title=Struts Log Message:默认值 Log4J Log Messages
#
# 6)PatternLayout选项属性
# -ConversionPattern = %m%n:格式化指定的消息(参数意思下面有)
#
#######################################################################################################################
# XMLLayout 选项属性，这里需要说明的就是日志信息格式中几个符号所代表含义：
# LocationInfo=true , 输出 java文件名和行号 ，默认值是 false。
# Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下：
# -X号: X信息输出时左对齐；
# %p: 输出日志信息优先级，即 DEBUG ，INFO ，WARN ，ERROR ，FATAL
# %d: 输出日志时间点的期或时间，默认格式为 ISO8601，也可以在其后指定格式，比如： %d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年 10 月 18 日 22 ：10 ：28 ，921
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %c: 输出日志信息所属的类目， 配置文件中的名字，通常就是所在类的全名（若使用rootLogger）
# %t: 输出产生该日志事件的线程名
# %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合 ,包括类目名、发生的线程，以及行数。举例： Testlog4.main(TestLog4.java:10)
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像 java servlets这样的多客户线程应用中。
# %%: 输出一个"%" 字符
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息
# %n: 输出一个回车换行符， Windows平台为 "\r\n" ，Unix平台为"\n" 输出日志信息换行
# %M: 输出日志信息所属的方法
# 可以在 %与模式字符之间加上修饰来控制其最小宽度、最大宽度和文本的对齐方式。如：
# 1) %20c   ：指定输出： category的名称，最小宽度是 20 ，如果category的名称小于 20 的话，默认情况下右对齐。
# 2) % -20c ：指定输出category的名称，最小宽度是 20 ，如果category的名称小于 20 的话， "-"号指 定左对齐。
# 3) %.30c  ：指定输出category的名称，最大宽度是 30 ，如果 category的名称大于 30 的话，就会将左边多出的字符截掉，但小于 30 的话也不会有空格。
# 4) %20.30c：指定输出category的名称，如果category的名称小于 20 就补空格，并且右对齐，如果其名称长于 30 字符，就从左边交远销出的字符截掉。
######################################################################################################################
# ④指定特定包的输出特定的级别
# log4j.logger.org.springframework=DEBUG
################################################################################
# OFF,systemOut,logFile,logDailyFile,logRollingFile,logMail,logDB,ALL

log4j.rootLogger = DEBUG,systemOut,logFile,logDailyFile,logRollingFile,logMail,logDB

#输出到控制台
log4j.appender.systemOut = org.apache.log4j.ConsoleAppender
log4j.appender.systemOut.Threshold = DEBUG
log4j.appender.systemOut.layout = org.apache.log4j.PatternLayout
log4j.appender.systemOut.layout.ConversionPattern = [%-5p][%-22d{yyyy-MM-dd HH\:mm\:ssS}][%l]%n%m%n
log4j.appender.systemOut.ImmediateFlush = TRUE
log4j.appender.systemOut.Target = System.out
log4j.appender.systemOut.Encoding = UTF-8

#输出到文件 ,编码方式的UTF-8后面不能有空格
log4j.appender.logFile = org.apache.log4j.FileAppender
log4j.appender.logFile.layout = org.apache.log4j.PatternLayout
log4j.appender.logFile.layout.ConversionPattern = [%-5p][%-22d{yyyy-MM-dd HH\:mm\:ssS}]%n[%l]%n%m%n
log4j.appender.logFile.Threshold = INFO
log4j.appender.logFile.ImmediateFlush = TRUE
log4j.appender.logFile.Append = TRUE
log4j.appender.logFile.File = E\:/Hlht_log/File/log4j_Hlht.log
log4j.appender.logFile.Encoding = UTF-8

#按DatePattern输出到文件 ,编码方式的UTF-8后面不能有空格,用于收集特殊错误的日志文件 ,编码方式的UTF-8后面不能有空格
log4j.appender.logDailyFile = org.apache.log4j.DailyRollingFileAppender
log4j.appender.logDailyFile.layout = org.apache.log4j.PatternLayout
log4j.appender.logDailyFile.layout.ConversionPattern = [%-5p][%-22d{yyyy-MM-dd HH\:mm\:ssS}]%n[%l]%n%m%n
log4j.appender.logDailyFile.Threshold = ERROR
log4j.appender.logDailyFile.ImmediateFlush = TRUE
log4j.appender.logDailyFile.Append = TRUE
log4j.appender.logDailyFile.File = E\:/Hlht_log/DailyFile_error/log4j_Hlht_error.log
log4j.appender.logDailyFile.DatePattern = '.'yyyy-MM-dd-HH-mm'.log'
log4j.appender.logDailyFile.Encoding = UTF-8

#设定文件大小输出到文件 ,编码方式的UTF-8后面不能有空格
log4j.appender.logRollingFile = org.apache.log4j.RollingFileAppender
log4j.appender.logRollingFile.layout = org.apache.log4j.PatternLayout
log4j.appender.logRollingFile.layout.ConversionPattern = [%-5p][%-22d{yyyy-MM-dd HH\:mm\:ssS}]%n[%l]%n%m%n
log4j.appender.logRollingFile.Threshold = DEBUG
log4j.appender.logRollingFile.ImmediateFlush = TRUE
log4j.appender.logRollingFile.Append = TRUE
log4j.appender.logRollingFile.File = E\:/Hlht_log/RollingFile/log4j_Hlht.log
log4j.appender.logRollingFile.MaxFileSize = 1MB
log4j.appender.logRollingFile.MaxBackupIndex = 10
log4j.appender.logRollingFile.Encoding = UTF-8


#sql输出设置
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG
log4j.logger.java.sql.ResultSet=DEBUG

# 用Email发送日志
# 依赖的jar包： log4j-1.2.15.jar（版本低于log4j-1.2.14.jar不支持SMTP认证） ，mail.jar ，activation.jar 
# 一、 标题乱码 
#	log4J配置文件默认的读取方式是ISO-88591，遇到中文会出现乱码，我们可以把这个配置文件log4j.properties用jdk的工具native2asii转换一下编码方式。 
# 二、 正文乱码
# 我们可以写一个布局模式。如果你要使用HTMLLayout，我们就写一个HTMLLayout的子类，覆盖HTMLLayout的 getContentType方法即可。假如我要用org.apache.log4j.HTMLLayout。我们就可以写一个DefineLayOut 类，代码如下： 
# package com.sun; 
# import org.apache.log4j.HTMLLayout; 
# public class DefineLayOut extends HTMLLayout{ 
# 	public String getContentType() { 
# 		return "text/html;charset=GBK"; 
# 	} 
# } 

# log4j的邮件发送appender
log4j.appender.logMail = org.apache.log4j.net.SMTPAppender
# 发送邮件的门槛，仅当等于或高于FATAL（高于ERROR）时，邮件才被发送，Log4j的SMTP的级别默认是ERROR级别 
log4j.appender.logMail.Threshold = FATAL
# 缓存文件大小，日志达到1024k时发送Email
log4j.appender.logMail.BufferSize = 1024
# 发送邮件的邮箱帐号
log4j.appender.logMail.From = 1@163.com
# SMTP邮件发送服务器地址
log4j.appender.logMail.SMTPHost = SMTP.163.com
# SMTP发送认证的帐号名
log4j.appender.logMail.SMTPUsername = xly3000
# SMTP发送认证帐号的密码
log4j.appender.logMail.SMTPPassword = 1234567
# 是否打印调试信息，如果选true，则会输出和SMTP之间的握手等详细信息
log4j.appender.logMail.SMTPDebug = FALSE
# 发送到什么邮箱，如果要发送给多个邮箱，则用逗号分隔
log4j.appender.logMail.To = 1@gmail.com
# 如果需要发副本给某人，则加入下列行
log4j.appender.logMail.Bcc = 1@gmail.com
# 邮件主题
log4j.appender.logMail.Subject = Log4j Log Messages
# 输出文件的格式
log4j.appender.logMail.layout = org.apache.log4j.HTMLLayout
log4j.appender.logMail.layout.LocationInfo = TRUE\t\t
log4j.appender.logMail.layout.Title = Hlht Mail LogFile

#将日志登录到数据库
#本处设置Threshold为"WARN"以上级别在数据库存储(默认情况使用rootLogger中的设置) 
log4j.appender.logDB = org.apache.log4j.jdbc.JDBCAppender
log4j.appender.logDb.Threshold = ERROE
log4j.appender.logDB.Driver = oracle.jdbc.driver.OracleDriver
log4j.appender.logDB.URL = jdbc:oracle:thin:@10.1.2.42:1521:orcl
log4j.appender.logDB.User = hlht
log4j.appender.logDB.Password = hlht
log4j.appender.logDB.Sql =INSERT INTO SYS_LOG(project_name,log_time,log_level,file_name,line,class,thread_name,message) values('Hlht','%d{yyyy-MM-dd HH\:mm\:ss}','%p','%F','%l','%c','[t]','ii')
log4j.appender.logDB.layout = org.apache.log4j.PatternLayout
#log4j.appender.logDB.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n  
log4j.appender.logDb.Encoding =UTF-8